name: Build Release (CUDA)

on: workflow_dispatch

permissions:
  contents: write

jobs:
  define_matrix:
    name: Define Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Define Job Output
        id: set-matrix
        run: |
          $matrix = @{
              'os' = @('ubuntu-latest')
              'pyver' = @("3.13")
              'cuda' = @("12.6.2")
              'releasetag' = @("basic")
          }

          $matrixOut = ConvertTo-Json $matrix -Compress
          Write-Output ('matrix=' + $matrixOut) >> $env:GITHUB_OUTPUT

  build_wheels:
    name: Build Wheel ${{ matrix.os }} ${{ matrix.pyver }} ${{ matrix.cuda }} ${{ matrix.releasetag == 'wheels' && 'AVX2' || matrix.releasetag }}
    needs: define_matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.define_matrix.outputs.matrix) }}
    env:
      CUDAVER: ${{ matrix.cuda }}
      AVXVER: ${{ matrix.releasetag }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          activate-environment: true

      - name: Setup Mamba
        uses: conda-incubator/setup-miniconda@v3.1.0
        with:
          activate-environment: "build"
          python-version: ${{ matrix.pyver }}
          miniforge-version: latest
          add-pip-as-python-dependency: true
          auto-activate-base: false

      - name: Install Dependencies
        env:
          MAMBA_DOWNLOAD_FAILFAST: "0"
          MAMBA_NO_LOW_SPEED_LIMIT: "1"
        run: |
          cuda_version="$CUDAVER"
          mamba install -y cuda -c "nvidia/label/cuda-${cuda_version}"

      - name: Build Wheel
        working-directory: vendor/llama-cpp-python
        run: |
          cuda_version="${CUDAVER%.*}${CUDAVER##*.}"  # E.g., 12.1 â†’ 121

          export CUDA_PATH="$CONDA_PREFIX"
          export CUDA_HOME="$CONDA_PREFIX"
          export CUDA_TOOLKIT_ROOT_DIR="$CONDA_PREFIX"

          if [[ "$RUNNER_OS" == "Linux" ]]; then
            export LD_LIBRARY_PATH="$CONDA_PREFIX/lib:$LD_LIBRARY_PATH"
          fi

          export VERBOSE=1
          export CMAKE_ARGS="-DGGML_CUDA=on -DLLAVA_BUILD=off -DCMAKE_CUDA_ARCHITECTURES=all"
          export CMAKE_ARGS="-DGGML_CUDA_FORCE_MMQ=OFF $CMAKE_ARGS"
          export CMAKE_ARGS="$CMAKE_ARGS -DGGML_AVX2=off -DGGML_FMA=off -DGGML_F16C=off"

          uv -v build --python "cpython@${{ matrix.pyver }}" --wheel

          echo "CUDA_VERSION=$cuda_version" >> "$GITHUB_ENV"

          # Rename wheels
          for whl in dist/*.whl; do
            mv "$whl" "${whl%.whl}-cu$CUDAVER.whl"
          done

      - uses: softprops/action-gh-release@v2
        with:
          files: vendor/llama-cpp-python/dist/*
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}